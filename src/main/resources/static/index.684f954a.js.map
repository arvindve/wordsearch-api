{"mappings":"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","sources":["src/js/grid.js","src/js/index.js"],"sourcesContent":["export class Grid {\n\n    constructor() {\n        this.wordSelectMode = false;\n        this.selectedItems = [];\n        this.firstSelectedItem;\n        this.gridArea = null;\n        this.words = [];\n        this.foundWords = [];\n    \n    }\n\n    getCellsInRange(firstLetter, currentLetter) {\n        let cellsInRange = [];\n\n        if(firstLetter.x > currentLetter.x || firstLetter.y > currentLetter.y) {\n            [currentLetter, firstLetter] = [firstLetter, currentLetter]\n        }\n\n        if (firstLetter.y === currentLetter.y) {\n\n            for (let i = firstLetter.x; i <= currentLetter.x; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\n            }\n\n        } else if (firstLetter.x === currentLetter.x) {\n\n            for (let i = firstLetter.y; i <= currentLetter.y; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\n            }\n        } else if(currentLetter.y - firstLetter.y === currentLetter.x - firstLetter.x) {\n            let delta = currentLetter.y - firstLetter.y;\n            for (let i = 0; i <= delta; i++) {\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i+firstLetter.x}\"][data-y=\"${i+firstLetter.y}\"]`));\n            }\n        }\n        \n        return cellsInRange;\n    }\n\n    renderGrid(gridSize, wordGrid) {\n\n        var gridArea = document.getElementsByClassName(\"grid-area\")[0];\n        if (gridArea.lastChild) {\n            gridArea.removeChild(gridArea.lastChild);\n        }\n        this.gridArea = gridArea;\n        var tbl = document.createElement(\"table\");\n        var tblBody = document.createElement(\"tbody\");\n        let index = 0;\n        for (var i = 0; i < gridSize; i++) {\n            var row = document.createElement(\"tr\");\n\n            for (var j = 0; j < gridSize; j++) {\n                var cell = document.createElement(\"td\");\n                let letter = wordGrid[index++];\n                var cellText = document.createTextNode(letter);\n                cell.appendChild(cellText);\n                cell.setAttribute(\"data-x\", i);\n                cell.setAttribute(\"data-y\", j);\n                cell.setAttribute(\"data-letter\", letter);\n                row.appendChild(cell);\n            }\n\n            tblBody.appendChild(row);\n        }\n\n        tbl.appendChild(tblBody);\n        gridArea.appendChild(tbl);\n\n        //click handlers\n\n        tbl.addEventListener(\"mousedown\", (event) => {\n\n            this.wordSelectMode = true;\n            const cell = event.target;\n            let x = +cell.getAttribute(\"data-x\");\n            let y = +cell.getAttribute(\"data-y\");\n            this.firstSelectedItem = {\n                x, y\n            };\n           \n        });\n\n        tbl.addEventListener(\"mousemove\", (event) => {\n\n            if (this.wordSelectMode) {\n\n                const cell = event.target;\n                let x = +cell.getAttribute(\"data-x\");\n                let y = +cell.getAttribute(\"data-y\");\n\n                this.selectedItems.forEach(cell => cell.classList.remove(\"selected\"));\n                this.selectedItems = this.getCellsInRange(this.firstSelectedItem, {x, y});\n                this.selectedItems.forEach(cell => cell.classList.add(\"selected\"));\n\n            }\n           \n        \n        });\n\n        tbl.addEventListener(\"mouseup\", (event) => {\n            this.wordSelectMode = false;\n            const selectedWord = this.selectedItems.reduce((word, cell) => word += cell.getAttribute(\"data-letter\"),'');\n            const reversedSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\n\n            if(this.words.indexOf(selectedWord) !== -1){\n                this.foundWords.push(selectedWord);\n            } else if(this.words.indexOf(reversedSelectedWord) !== -1) {\n                this.foundWords.push(reversedSelectedWord);\n            } else {\n                this.selectedItems.forEach(item => item.classList.remove(\"selected\"));\n            }\n            this.selectedItems = []\n        \n    \n        });\n    }\n}","import { Grid } from \"./grid\";\n\nconst submitWordBtn  = document.querySelector(\".word-search\");\nsubmitWordBtn.addEventListener(\"click\" , async () => {\n\n    const commaSeparatedWords = document.querySelector(\"#add-word\").value;\n    const gridSize = document.querySelector(\"#grid-size\").value;\n\n    let result  = await fetchGridInfo(gridSize, commaSeparatedWords);\n    const grid = new Grid();\n    grid.words = commaSeparatedWords;\n\n    grid.renderGrid(gridSize, result);\n\n    let wordListNode = document.createTextNode(grid.words);\n    let wordListSection = document.querySelector(\".word-list\")\n\n    if (wordListSection.lastChild) {\n        wordListSection.removeChild(wordListSection.lastChild);\n    }\n\n    wordListSection.appendChild(wordListNode);\n});\n\nasync function fetchGridInfo(gridSize, commaSeparatedWords) {\n    let response = await fetch(`./wordgrid?gridSize=${gridSize}&words=${commaSeparatedWords}`);\n    let result = await response.text();\n    return result.split(\" \");\n}\n"],"names":["Grid","this","wordSelectMode","selectedItems","firstSelectedItem","gridArea","words","foundWords","getCellsInRange","firstLetter","currentLetter","cellsInRange","x","y","i","push","querySelector","delta","renderGrid","gridSize","wordGrid","document","getElementsByClassName","lastChild","removeChild","tbl","createElement","tblBody","index","row","j","cell","letter","cellText","createTextNode","appendChild","setAttribute","addEventListener","event","target","getAttribute","forEach","classList","remove","add","selectedWord","reduce","word","reversedSelectedWord","split","reverse","join","indexOf","item","async","commaSeparatedWords","value","result","response","fetch","text","fetchGridInfo","grid","wordListNode","wordListSection"],"version":3,"file":"index.684f954a.js.map"}